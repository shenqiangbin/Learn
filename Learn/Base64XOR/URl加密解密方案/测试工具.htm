<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title></title>
    <script type="text/javascript">
        var base64EncodeChars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
        var base64DecodeChars = new Array(
                -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1, -1, 63,
                52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1, -1, -1, -1, -1,
                -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,
                15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, -1,
                -1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
                41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -1, -1, -1, -1, -1);

        //客户端Base64编码,使用的是utf8编码格式

        function base64encode_utf8(str) {
            var out, i, len;
            var c1, c2, c3;

            len = str.length;
            i = 0;
            out = "";
            while (i < len) {
                c1 = str.charCodeAt(i++) & 0xff;
                if (i == len) {
                    out += base64EncodeChars.charAt(c1 >> 2);
                    out += base64EncodeChars.charAt((c1 & 0x3) << 4);
                    out += "==";
                    break;
                }
                c2 = str.charCodeAt(i++);
                if (i == len) {
                    out += base64EncodeChars.charAt(c1 >> 2);
                    out += base64EncodeChars.charAt(((c1 & 0x3) << 4) | ((c2 & 0xF0) >> 4));
                    out += base64EncodeChars.charAt((c2 & 0xF) << 2);
                    out += "=";
                    break;
                }
                c3 = str.charCodeAt(i++);
                out += base64EncodeChars.charAt(c1 >> 2);
                out += base64EncodeChars.charAt(((c1 & 0x3) << 4) | ((c2 & 0xF0) >> 4));
                out += base64EncodeChars.charAt(((c2 & 0xF) << 2) | ((c3 & 0xC0) >> 6));
                out += base64EncodeChars.charAt(c3 & 0x3F);
            }
            return out;
        }

        //客户端Base64解码，使用的是utf8编码格式

        function base64decode_utf8(str) {
            var c1, c2, c3, c4;
            var i, len, out;

            len = str.length;
            i = 0;
            out = "";
            while (i < len) {
                /* c1 */
                do {
                    c1 = base64DecodeChars[str.charCodeAt(i++) & 0xff];
                } while (i < len && c1 == -1);
                if (c1 == -1)
                    break;

                /* c2 */
                do {
                    c2 = base64DecodeChars[str.charCodeAt(i++) & 0xff];
                } while (i < len && c2 == -1);
                if (c2 == -1)
                    break;

                out += String.fromCharCode((c1 << 2) | ((c2 & 0x30) >> 4));

                /* c3 */
                do {
                    c3 = str.charCodeAt(i++) & 0xff;
                    if (c3 == 61)
                        return out;
                    c3 = base64DecodeChars[c3];
                } while (i < len && c3 == -1);
                if (c3 == -1)
                    break;

                out += String.fromCharCode(((c2 & 0XF) << 4) | ((c3 & 0x3C) >> 2));

                /* c4 */
                do {
                    c4 = str.charCodeAt(i++) & 0xff;
                    if (c4 == 61)
                        return out;
                    c4 = base64DecodeChars[c4];
                } while (i < len && c4 == -1);
                if (c4 == -1)
                    break;
                out += String.fromCharCode(((c3 & 0x03) << 6) | c4);
            }
            return out;
        }

        //异或加密代码
        function XOR(strLeft, strRight) {
            var str = "";
            var i;

            for (i = 0; i < strLeft.length; i++) {
                var index = i % strRight.length;
                str += String.fromCharCode(strLeft.charCodeAt(i) ^ strRight.charCodeAt(index));
            }
            return str;
        }

        function XOREncrypt() {
            var oldString = document.getElementById("oldString");
            var key = document.getElementById("key");         
            document.getElementById("first").value = XOR(oldString.value, key.value);            
        }

        function Base64Encrypt() {
            var first = document.getElementById("first");
            document.getElementById("second").value = base64encode_utf8(first.value);
        }

        function Mix() {
            var oldString = document.getElementById("oldString");
            var key = document.getElementById("key");
            var mixResult = document.getElementById("mixResult");            
            mixResult.value = base64encode_utf8(XOR(oldString.value, key.value));
        }

        function Invoke() {
            XOREncrypt();
            Base64Encrypt();            
            Mix();
        }
    </script>
    <style type="text/css">
        body
        {
            font-size: small;
        }
        #oldString, #key, #first, #second, #mixResult
        {
            width: 600px;
        }
        hr
        {
            color: Red;
            border: 5px solid red;
        }
    </style>
</head>
<body>
    <p>
        要加密的字符串：
        <br />
        <input id="oldString" type="text" value="id=201002010201&type=english&time=20100901" /></p>
    <hr />
    <p>
        异或的对象：<br />
        <input id="key" type="text" value="201002010201" /></p>
    <p>
        先使用异或的方式进行加密的结果：<br />
        <input id="first" type="text" />这个结果没有显示全，所以不正确</p>
    <p>
        后使用UTF8编码方式对异或加密结果进行Base64位加密结果：<br />
        <input id="second" type="text" />
        上面的结果不对，所以这个也不对</p>
    <hr />
    <p>
        先异或后base64加密的结果：<br />
        <input id="mixResult" type="text" />
        这个结果正确</p>

    <input id="btnEncrypt" type="button" value="加密" onclick="Invoke()" />

    <p>
        两次加密结果的不同，是因为XOR加密出来的结果有些特殊字符没有显示出来，当取值时，<br />
        取到的值也就不同。
    </p>
</body>
</html>
